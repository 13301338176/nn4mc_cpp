<%BEGIN_DEFINITION_TEMPLATE>
/********************
    simplernn.cpp

    Code generated using nn4mc.

    This file implements a simple recurret layer.

*/

#include "simplernn.h"
#include "activations.h"
#include <math.h>
#include <stdlib.h>

#define max(a, b) (((a)>(b) ? (a) : (b)))
#define min(a, b) (((a)<(b) ? (a) : (b)))

struct SimpleRNN buildSimpleRNN(<%WEIGHT_DATATYPE_DELIMITER> * W, <%WEIGHT_DATATYPE_DELIMITER> * b, <%INDEX_DATATYPE_DELIMITER> input_sh0, <%INDEX_DATATYPE_DELIMITER> input_sh1, <%INDEX_DATATYPE_DELIMITER> output_sh, <%ACTIVATION_DATATYPE_DELIMITER> activation)
{
	struct SimpleRNN layer;

	layer.weights = W;
	layer.biases = b;

    layer.input_shape[0] = input_sh0;
    layer.input_shape[1] = input_sh1;
    
    layer.activation = activation;
    layer.window_size= output_sh;

    layer.output_shape = output_sh;
    
	return layer;
}

<%LAYER_DATATYPE_DELIMITER> * fwdSimpleRNN(struct SimpleRNN L, <%LAYER_DATATYPE_DELIMITER>* input)
{

    <%LAYER_DATATYPE_DELIMITER> * S = (<%LAYER_DATATYPE_DELIMITER>*)malloc(layer.input_shape[0]*(layer.input_shape[1]+1) * sizeof(<%LAYER_DATATYPE_DELIMITER>)); // rolling window

    for (int i=0; i < L.input_shape[0]*(L.window_size+1); i++) S[i] = 0.0;

    for (int j=0 ;  j < L.output_shape; j++)  {
        for (int i=0; i< L.input_shape[0]*L.input_shape[1]; i++){
            for (int k = 0; k < L.window_size+1; k++){

                int index = i*L.window_size + k+1;
                int index_before = i*window_size + k;
                int bias_matrix_index = k*L.output_shape + i;
                S[index] = input[i]*L.biases[bias_matrix_index] + S[index_before] * *(L.weights + i*L.output_shape + k);
            }
        }
    }
    if(L.activation != 0xB)
        h[i] = activate(h[i], L.output_size, L.activation);

    free(input);
    return h;
}

<%END_DEFINITION_TEMPLATE>

<%BEGIN_INITIALIZE_TEMPLATE>
        <%LAYER_NAME> = buildSimpleRNN(&<%WEIGHT_NAME>[0], <%BIAS_NAME>, <%INPUT_SHAPE_0>, <%INPUT_SHAPE_1>, <%OUTPUT_SIZE>, <%ACTIVATION>);
<%END_INITIALIZE_TEMPLATE>

<%BEGIN_CALL_TEMPLATE>
        data = fwdSimpleRNN(<%LAYER_NAME>, <%INPUT>);
<%END_CALL_TEMPLATE>
