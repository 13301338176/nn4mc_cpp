<%BEGIN_DEFINITION_TEMPLATE>

/*************
* simplernn.cpp
*
* SimpleRNN Layer
* Hardware Plateform: ESP-32
*
* This file defines the functions needed to build a Simple RNN layer, and perform a forward pass.
*/

#include "simplernn.h"
#include "activation_func.h"
#include <math.h>
#include <stdlib.h>

#define max(a, b) (((a)>(b) ? (a) : (b)))
#define min(a, b) (((a)<(b) ? (a) : (b)))

struct SimpleRNN buildSimpleRNN()
{
	struct SimpleRNN layer;

	layer.weights = W;
	layer.biases = b;

    layer.input_shape[0] = input_sh0;
    layer.input_shape[1] = input_sh1;

    
    S = (<%LAYER_DATATYPE_DELIMITER>*)malloc(layer.input_shape[0]*(layer_input_shape[1]+1) * sizeof(<%LAYER_DATATYPE_DELIMITER>)); // rolling window

	return layer;
}


<%LAYER_DATATYPE_DELIMITER> * fwdSimpleRNN(struct SimpleRNN L, <%LAYER_DATATYPE_DELIMITER>* input)
{
    


    free(input);
    return h;
}

<%END_DEFINITION_TEMPLATE>

<%BEGIN_INITIALIZE_TEMPLATE>
        <%LAYER_NAME> = buildSimpleRNN();
<%END_INITIALIZE_TEMPLATE>

<%BEGIN_CALL_TEMPLATE>
        data = fwdSimpleRNN(<%LAYER_NAME>, <%INPUT>);
<%END_CALL_TEMPLATE>
