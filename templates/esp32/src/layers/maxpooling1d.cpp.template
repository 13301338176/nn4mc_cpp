<%BEGIN_DEFINITION_TEMPLATE>

/*************
* maxpooling1d.cpp
*
* Conv1D Layer
* Hardware Plateform: ESP-32
*
* This file defines the functions needed to build a 1D Convolutional layer, and perform a forward pass.
*/

#include "maxpooling1d.h"
#include <math.h>

struct Conv1D buildConv1D(<%WEIGHT_DATATYPE_DELIMITER>* W, <%WEIGHT_DATATYPE_DELIMITER>* b,
				   <%INDEX_DATATYPE_DELIMITER> pool_size, <%INDEX_DATATYPE_DELIMITER> strides,
				   <%INDEX_DATATYPE_DELIMITER> input_sh0, <%INDEX_DATATYPE_DELIMITER> input_sh1, <%INDEX_DATATYPE_DELIMITER> filters)
{
	Conv1D layer;

	layer.weights = W;
	layer.biases = b;

	layer.weight_shape[0] = kernel_size;
	layer.weight_shape[1] = input_sh0;
	layer.weight_shape[2] = filters;

	layer.strides = strides;		
    layer.kernel_size[0] = kernel_size;
	layer.input_shape[0] = input_sh0;
	layer.input_shape[1] = input_sh1;
    
    layer.filters= filters;

	layer.output_shape[0] = (int)(layer.input_shape[0] - layer.kernel_size[0] + 1);
	layer.output_shape[1] = layer.filters;

	return layer;
}


float ** fwdConv1D(Conv1D* layer, <%LAYER_DATATYPE_DELIMITER>** input)
{
	// Dereference the provided layer to simplify the code
	struct Conv1D L = (*layer);

    // Data array:
     float ** h;
     h= (float**)malloc((int)L.output_shape[0] * sizeof(float*));
     for (int i=0; i<(int)L.output_shape[0]; i++){
         h[i]= (float*)malloc((int)L.output_shape[1] * sizeof(float));
     }

	// Loop through to calculate the output at each point
	for(<%INDEX_DATATYPE_DELIMITER> i = 0; i < L.output_shape[0]; i++)
	{
		for(<%INDEX_DATATYPE_DELIMITER> j = 0; j < L.output_shape[1]; j++)
		{
			h[i][j] = L.biases[j];

			for(<%INDEX_DATATYPE_DELIMITER> x = 0; x < L.kernel_shape[0]; x++)
			{
				for(<%INDEX_DATATYPE_DELIMITER> y = 0; y < L.weight_shape[1]; y++)
				{
                    h[i][j] += *(L.weights + x*L.weight_shape[1]*L.weight_shape[2] + y*L.weight_shape[2] +  j) * input[i+x][y]; 
				}
			}

			// Now perform the activation function
			// NOTE: NEED TO IMPLEMENT
		}
	}

    for (int i=0; i < L.input_shape[0] ; i++){
          float * ptr = input[i];
          free(ptr);
    }   

    *layer = L;
    return h;
}

<%END_DEFINITION_TEMPLATE>

<%BEGIN_INITIALIZE_TEMPLATE>
struct Conv1D <%LAYER_NAME> = buildConv1D(&<%WEIGHT_NAME>[0][0][0], <%BIAS_NAME>, <%KERNEL_SIZE>, <%STRIDE_SIZE>, <%INPUT_SHAPE_0>,  <%INPUT_SHAPE_1>, <%FILTERS>);
<%END_INITIALIZE_TEMPLATE>

<%BEGIN_CALL_TEMPLATE>
data2D = fwdConv1D(&<%LAYER_NAME>, <%INPUT>);
<%END_CALL_TEMPLATE>
